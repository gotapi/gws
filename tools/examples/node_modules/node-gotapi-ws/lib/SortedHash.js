"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SortedHash = /** @class */ (function () {
    function SortedHash() {
        this.uuids = [];
        this.hash = {};
        this.allMessages = [];
        this.newMsgCallback = function (msg) { };
        this.onServerAckCallback = function () { };
        this.resetCallback = function () { };
    }
    SortedHash.prototype.push = function (message) {
        if (message.body != undefined) {
            if (this.uuids.indexOf(message.uuid) == -1) {
                this.uuids.push(message.uuid);
                this.hash[message.uuid] = message.body;
                this.allMessages.push(message.body);
                //开始调用回调
                this.newMsgCallback(message.body, message.uuid);
            }
        }
    };
    SortedHash.prototype.size = function () {
        return this.uuids.length;
    };
    SortedHash.prototype.reset = function () {
        this.uuids = [];
        this.allMessages = [];
        this.resetCallback();
    };
    SortedHash.prototype.all = function () {
        return this.allMessages;
    };
    SortedHash.prototype.markAsServerAck = function (uuid) {
        var indexOf = this.uuids.indexOf(uuid);
        if (indexOf != -1) {
            this.hash[uuid].sent = true;
            this.allMessages[indexOf].sent = true;
            this.onServerAckCallback(uuid, indexOf);
        }
    };
    /**
     * 消息需要被删除...因为发送失败;
     */
    SortedHash.prototype.markAsFailed = function (uuid) {
        this.remove(uuid);
    };
    SortedHash.prototype.markAsRollback = function (uuid) {
        this.remove(uuid);
    };
    SortedHash.prototype.remove = function (uuid) {
        var indexOf = this.uuids.indexOf(uuid);
        if (indexOf != -1) {
            delete (this.hash[uuid]);
            this.allMessages.splice(indexOf, 1);
            this.uuids.splice(indexOf, 1);
            this.onRemoveCallback(uuid, indexOf);
        }
    };
    return SortedHash;
}());
exports.default = SortedHash;

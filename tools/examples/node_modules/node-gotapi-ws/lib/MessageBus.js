"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MessageBody_1 = __importDefault(require("./MessageBody"));
var MessageType_1 = __importDefault(require("./MessageType"));
var UuidGenerator_1 = __importDefault(require("./UuidGenerator"));
var SendStatus_1 = __importDefault(require("./SendStatus"));
var MsgCodec_1 = __importDefault(require("./MsgCodec"));
var MessageCommand_1 = __importDefault(require("./MessageCommand"));
var SortedHash_1 = __importDefault(require("./SortedHash"));
var axios_1 = __importDefault(require("axios"));
var MessageBus = /** @class */ (function () {
    function MessageBus(direction, socketBus, historyUrl, groupName, historySize, position) {
        var _this = this;
        var self = this;
        this.direction = direction;
        this.socketBus = socketBus;
        this.historyUrl = historyUrl;
        this.sendStatusHash = {};
        this.sortedHash = new SortedHash_1.default;
        this.groupName = groupName;
        this.socketBus.onMsg = function (msg) {
            self.onMessage(msg);
        };
        this.historySize = historySize;
        this.position = position;
        this.socketBus.onConnect = function () {
            console.debug("connected in MessageBus:" + _this.socketBus._id);
            if (self.historySize > 0) {
                console.debug("historySize>0, try to fetch from history api");
                self.pullHistory();
            }
        };
        this.socketBus.connect();
        //this.pullHistory();
    }
    MessageBus.prototype.pushMessage = function (msg) {
        var _this = this;
        var messageBody;
        var uuid = UuidGenerator_1.default.generate();
        messageBody = new MessageBody_1.default(msg);
        var message = {
            body: messageBody,
            type: MessageType_1.default.Data,
            uuid: uuid
        };
        this.sendStatusHash[uuid] = SendStatus_1.default.Default;
        if (this.sortedHash != null) {
            this.sortedHash.push(message);
        }
        this.socketBus.send(message);
        var self = this;
        var timer = setTimeout(function () {
            /**
             *  如果两条之内再检查状态，还是未发送，则重发一次；最多重发两次;
            */
            if (_this.sendStatusHash[uuid] == SendStatus_1.default.Default) {
                console.debug("resend msg because no  ServerACK not received");
                self.socketBus.send(message);
                setTimeout(function () {
                    if (self.sendStatusHash[uuid] == SendStatus_1.default.Default) {
                        /**
                         * @todo  需要通知外部，要显示异常信息了;
                         * 本来想删掉，觉得未送达时，还是应该保存，并置一个错误信息;
                         */
                        //self.sortedHash.markAsFailed(uuid);
                    }
                }, 3000);
            }
        }, 3000);
    };
    MessageBus.prototype.onServerAck = function (uuid) {
        // this.sortedHash.push();
    };
    MessageBus.prototype.pullHistory = function () {
        var self = this;
        axios_1.default.request({
            url: this.historyUrl,
            method: "POST",
            params: {
                groupName: this.groupName,
                size: this.historySize,
                position: this.position
            }
        }).then(function (resp) {
            if (self.sortedHash == null) {
                console.log("self.sortedHash is null");
                return;
            }
            console.debug("pullHistory:items");
            if (resp.data.data.length != self.sortedHash.size()) {
                self.sortedHash.reset();
                for (var _i = 0, _a = resp.data.data.reverse(); _i < _a.length; _i++) {
                    var itemJson = _a[_i];
                    console.debug(itemJson);
                    var msg = JSON.parse(itemJson);
                    if (msg.body) {
                        msg.body.sent = true;
                    }
                    if (self.sortedHash != null) {
                        self.sortedHash.push(msg);
                    }
                }
            }
            else {
                console.debug("client side size equals server side size");
            }
        }).catch(function () { });
    };
    MessageBus.prototype.onMessage = function (messageStr) {
        //先用msgpackDecode一下，
        var message;
        try {
            message = MsgCodec_1.default.decode(messageStr);
        }
        catch (e) {
            console.debug("msgdecode failed:" + messageStr);
            //console.log(messageStr);
        }
        if (message == undefined) {
            console.debug('json decode failed str:' + messageStr);
            return;
        }
        var self = this;
        if (message.type == MessageType_1.default.Data) {
            /**
             *  @todo 追加到本地待显示队列中去;
             */
            if (this.sortedHash != null) {
                this.sortedHash.push(message);
            }
        }
        if (message.type == MessageType_1.default.Command) {
            switch (message.command) {
                case MessageCommand_1.default.SERVER_ACK:
                    console.debug("got an ack msg");
                    self.sendStatusHash[message.uuid] = SendStatus_1.default.ServerReceived;
                    if (self.sortedHash != null) {
                        self.sortedHash.markAsServerAck(message.uuid);
                    }
                    break;
                case MessageCommand_1.default.CUSTOMER_ACK:
                case MessageCommand_1.default.WAITRESS_ACK:
                    self.sendStatusHash[message.uuid] = SendStatus_1.default.PeerSideReceived;
                case MessageCommand_1.default.QUERY:
                    //客户端是不负责回应QUERY相关的消息的;
                    break;
                case MessageCommand_1.default.PINGPONG:
                    console.debug("new pingpong:" + new Date());
                    //对于PingPong信息，完全忽略掉;
                    break;
            }
        }
    };
    MessageBus.prototype.all = function () {
        if (this.sortedHash != null) {
            return this.sortedHash.all();
        }
        else {
            return [];
        }
    };
    MessageBus.prototype.setNewMessageCallback = function (callback) {
        if (this.sortedHash != null) {
            this.sortedHash.newMsgCallback = callback;
        }
    };
    MessageBus.prototype.setServerAckCallback = function (callback) {
        if (this.sortedHash != null) {
            this.sortedHash.onServerAckCallback = callback;
        }
    };
    MessageBus.prototype.setRemoveCallback = function (callback) {
        if (this.sortedHash != null) {
            this.sortedHash.onRemoveCallback = callback;
        }
    };
    MessageBus.prototype.close = function () {
        this.sortedHash = null;
    };
    return MessageBus;
}());
exports.default = MessageBus;
